var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { render, rehydrate } from 'fela-dom';
import objectEach from 'fast-loops/lib/objectEach';

function hasDOM(renderer) {
  return !renderer.isNativeRenderer && typeof window !== 'undefined' && window.document && window.document.createElement;
}

export default function ProviderFactory(BaseComponent, renderChildren, statics) {
  var Provider = function (_BaseComponent) {
    _inherits(Provider, _BaseComponent);

    function Provider(props, context) {
      _classCallCheck(this, Provider);

      var _this = _possibleConstructorReturn(this, (Provider.__proto__ || Object.getPrototypeOf(Provider)).call(this, props, context));

      if (props.rehydrate && hasDOM(props.renderer)) {
        rehydrate(props.renderer);
      }
      return _this;
    }

    _createClass(Provider, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (hasDOM(this.props.renderer)) {
          render(this.props.renderer);
        }
      }
    }, {
      key: 'getChildContext',
      value: function getChildContext() {
        return {
          renderer: this.props.renderer
        };
      }
    }, {
      key: 'render',
      value: function render() {
        return renderChildren(this.props.children);
      }
    }]);

    return Provider;
  }(BaseComponent);

  if (statics) {
    objectEach(statics, function (value, key) {
      Provider[key] = value;
    });
  }

  return Provider;
}