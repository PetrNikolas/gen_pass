var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import objectEach from 'fast-loops/lib/objectEach';
import arrayEach from 'fast-loops/lib/arrayEach';

import { clusterCache, cssifySupportRules, sheetMap, RULE_TYPE } from 'fela-utils';

import initDOMNode from './initDOMNode';
import findDOMNodes from './findDOMNodes';

export default function connectDOMNodes(renderer) {
  renderer.nodes = findDOMNodes();

  var cacheCluster = clusterCache(renderer.cache, renderer.mediaQueryOrder, renderer.supportQueryOrder);

  var baseNode = renderer.nodes[RULE_TYPE];

  objectEach(sheetMap, function (type, key) {
    if (cacheCluster[key].length > 0) {
      initDOMNode(renderer.nodes, baseNode, cacheCluster[key], type);
    }
  });

  var support = cssifySupportRules(cacheCluster.supportRules);

  if (support) {
    initDOMNode(renderer.nodes, baseNode, support, RULE_TYPE, '', true);
  }

  var mediaKeys = Object.keys(_extends({}, cacheCluster.supportMediaRules, cacheCluster.mediaRules));

  arrayEach(mediaKeys, function (media) {
    if (cacheCluster.mediaRules[media] && cacheCluster.mediaRules[media].length > 0) {
      initDOMNode(renderer.nodes, baseNode, cacheCluster.mediaRules[media], RULE_TYPE, media);
    }

    if (cacheCluster.supportMediaRules[media]) {
      var mediaSupport = cssifySupportRules(cacheCluster.supportMediaRules[media]);

      if (mediaSupport.length > 0) {
        initDOMNode(renderer.nodes, baseNode, mediaSupport, RULE_TYPE, media, true);
      }
    }
  });
}