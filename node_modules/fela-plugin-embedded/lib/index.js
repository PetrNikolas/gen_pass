'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _arrayReduce = require('fast-loops/lib/arrayReduce');

var _arrayReduce2 = _interopRequireDefault(_arrayReduce);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function isPlainObject(obj) {
  return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && !Array.isArray(obj);
}

function renderFontFace(_ref, renderer) {
  var fontFamily = _ref.fontFamily,
      src = _ref.src,
      otherProps = _objectWithoutProperties(_ref, ['fontFamily', 'src']);

  if (typeof fontFamily === 'string' && Array.isArray(src)) {
    return renderer.renderFont(fontFamily, src, otherProps);
  }

  // TODO: warning - invalid font data
}

function embedded(style, type, renderer) {
  var _loop = function _loop(property) {
    var value = style[property];

    if (property === 'fontFace' && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
      if (Array.isArray(value)) {
        style.fontFamily = (0, _arrayReduce2.default)(value, function (fontFamilyList, fontFace) {
          var fontFamily = renderFontFace(fontFace, renderer);

          if (fontFamily && fontFamilyList.indexOf(fontFamily) === -1) {
            fontFamilyList.push(fontFamily);
          }

          return fontFamilyList;
        }, []).join(',');
      } else {
        style.fontFamily = renderFontFace(value, renderer);
      }
      delete style.fontFace;
    } else if (property === 'animationName' && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
      if (Array.isArray(value)) {
        style[property] = value.map(function (frame) {
          return renderer.renderKeyframe(function () {
            return frame;
          });
        }).join(',');
      } else {
        style[property] = renderer.renderKeyframe(function () {
          return value;
        });
      }
    } else if (isPlainObject(value)) {
      embedded(value, type, renderer);
    }
  };

  for (var property in style) {
    _loop(property);
  }

  return style;
}

exports.default = function () {
  return embedded;
};