'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = createTheme;

var _arrayEach = require('fast-loops/lib/arrayEach');

var _arrayEach2 = _interopRequireDefault(_arrayEach);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createTheme() {
  var themeProperties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var previousTheme = arguments[1];

  var theme = {
    listeners: [],
    properties: themeProperties,

    update: function update(newProperties) {
      theme.properties = newProperties;
      theme._emitChange();
    },
    get: function get() {
      return _extends({}, theme.previousProperties, theme.properties);
    },
    subscribe: function subscribe(listener) {
      theme.listeners.push(listener);

      return function () {
        return theme.listeners.splice(theme.listeners.indexOf(listener), 1);
      };
    },
    _emitChange: function _emitChange() {
      var properties = theme.get();

      (0, _arrayEach2.default)(theme.listeners, function (listener) {
        return listener(properties);
      });
    }
  };

  if (previousTheme) {
    theme.previousProperties = previousTheme.get();
    previousTheme.subscribe(function (properties) {
      theme.previousProperties = properties;
      theme._emitChange();
    });
  } else {
    theme.previousProperties = {};
  }

  return theme;
}