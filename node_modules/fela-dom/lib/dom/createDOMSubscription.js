'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _changeHandlers;

exports.default = createDOMSubscription;

var _objectEach = require('fast-loops/lib/objectEach');

var _objectEach2 = _interopRequireDefault(_objectEach);

var _felaUtils = require('fela-utils');

var _getDOMNode = require('./getDOMNode');

var _getDOMNode2 = _interopRequireDefault(_getDOMNode);

var _generateRule = require('./generateRule');

var _generateRule2 = _interopRequireDefault(_generateRule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
/* eslint-disable consistent-return */


var changeHandlers = (_changeHandlers = {}, _defineProperty(_changeHandlers, _felaUtils.RULE_TYPE, function (node, _ref) {
  var selector = _ref.selector,
      declaration = _ref.declaration,
      support = _ref.support;

  var cssRule = (0, _generateRule2.default)(selector, declaration, support);

  // only use insertRule in production as browser devtools might have
  // weird behavior if used together with insertRule at runtime
  if (process.env.NODE_ENV !== 'production') {
    node.textContent += cssRule;
    return;
  }

  try {
    node.sheet.insertRule(cssRule, node.sheet.cssRules.length);
  } catch (e) {
    // TODO: warning?
  }
}), _defineProperty(_changeHandlers, _felaUtils.KEYFRAME_TYPE, function (node, _ref2) {
  var keyframe = _ref2.keyframe;

  node.textContent += keyframe;
}), _defineProperty(_changeHandlers, _felaUtils.FONT_TYPE, function (node, _ref3) {
  var fontFace = _ref3.fontFace;

  node.textContent += fontFace;
}), _defineProperty(_changeHandlers, _felaUtils.STATIC_TYPE, function (node, _ref4) {
  var selector = _ref4.selector,
      css = _ref4.css;

  if (selector) {
    node.textContent += (0, _felaUtils.generateCSSRule)(selector, css);
  } else {
    node.textContent += css;
  }
}), _changeHandlers);

function createDOMSubscription(nodes) {
  var baseNode = nodes[_felaUtils.RULE_TYPE];

  return function changeSubscription(change) {
    if (change.type === _felaUtils.CLEAR_TYPE) {
      return (0, _objectEach2.default)(nodes, function (node) {
        node.textContent = '';
      });
    }

    var handleChange = changeHandlers[change.type];

    if (handleChange) {
      var node = (0, _getDOMNode2.default)(nodes, baseNode, change.type, change.media, !!change.support);

      handleChange(node, change);
    }
  };
}