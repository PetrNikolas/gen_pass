var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import hoistStatics from './hoistStatics';
import { THEME_CHANNEL } from './themeChannel';

export default function withThemeFactory(BaseComponent, createElement, contextTypes) {
  return function withTheme(component) {
    var propName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'theme';

    var WithTheme = function (_BaseComponent) {
      _inherits(WithTheme, _BaseComponent);

      function WithTheme(props, context) {
        _classCallCheck(this, WithTheme);

        var _this = _possibleConstructorReturn(this, (WithTheme.__proto__ || Object.getPrototypeOf(WithTheme)).call(this, props, context));

        _this.state = {
          theme: context[THEME_CHANNEL] ? context[THEME_CHANNEL].get() : {}
        };
        return _this;
      }

      _createClass(WithTheme, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          var _this2 = this;

          if (this.context[THEME_CHANNEL]) {
            this.unsubscribe = this.context[THEME_CHANNEL].subscribe(function (properties) {
              return _this2.setState({
                theme: properties
              });
            });
          }
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          if (this.unsubscribe) {
            this.unsubscribe();
          }
        }
      }, {
        key: 'render',
        value: function render() {
          return createElement(component, _extends({}, this.props, _defineProperty({}, propName, this.state.theme)));
        }
      }]);

      return WithTheme;
    }(BaseComponent);

    if (contextTypes) {
      WithTheme.contextTypes = contextTypes;
    }

    return hoistStatics(WithTheme, component);
  };
}